"""
Creates GUI for Codon Coverage and Visualisation Analysis
Created on 6 Jun 2019
@author: 2138645C
"""
import PySimpleGUI as sg
import os

print('Setting up Input Section Layout')

Input_Layout = [
    [sg.Radio('Directory', "FileRadio", enable_events=True, key='_DirRadio_'),
     sg.In(key='_DirPath_', disabled=True),
     sg.FolderBrowse(button_text='Choose File Directory', target='_DirPath_', disabled=True,
                     tooltip='Choose a directory with fasta files that are to be analysed.')
     ],
    [sg.Radio('Load Fasta Files', "FileRadio", enable_events=True, key='_FileRadio_'),
     sg.In(key='_FastaDir_', disabled=True),
     sg.FilesBrowse(button_text='Choose fasta files', file_types=(('FASTA', '*.fasta'),), target='_FastaDir_',
                    disabled=True, tooltip='Choose 1 or more fasta files that are to be analysed')],
    [sg.Radio('Load pre-made CSV File', "FileRadio", enable_events=True, key='_CSVRadio_'),
     sg.In(key='_CSVDir_', disabled=True),
     sg.FileBrowse(button_text='Load CSV file', file_types=(('CSV', '*.csv'),), target='_CSVDir_',
                   disabled=True, tooltip='Choose 1 csv file already generated by this program.')],
    [sg.Text('No Files chosen for analysis.', key='_InputText_')]
    ]
RSCU_Layout = [
    [sg.Checkbox('Calculate RSCU', default=True, disabled=True, key='_RSCUCheck_')],
    [sg.Checkbox('Enable RSCU Quality Control', default=True, enable_events=True, key='_RSCUQC_')],
    [sg.Frame(layout=[
        [sg.Checkbox('Discard RSCU if degeneracy of amino acid is larger than amino acid count in a gene.',
                     default=True, key='_RSCUQCGene_')],
        [sg.Checkbox('Discard RSCU the count of empty (NaN) values of a codon is over...'),
         sg.In('15', key='_RSCUQCThr_')]], title='Analysis Settings', relief='raised')]
    ]
ENC_Layout = [
    [sg.Checkbox('Calculate ENC', default=True, disabled=True, key='_ENCCheck_')],
    [sg.Checkbox('GC3 Placeholder', default=False, disabled=True, key='_ENCGC3_')]
    ]
FOP_Layout = [
    [sg.Checkbox('Calculate FOP', default=True, key='_FOPCheck_'),
     sg.Text('WARNING: Enabling FOP will significantly increase analysis time', background_color='red')],
    [sg.Frame(layout=[
        [sg.Radio('Optimal Codon Table (including type)', 'FOPdicRadio'),
         sg.In('None selected', key='_FOPDicTxt_'),
         sg.FilesBrowse(button_text='Choose file', file_types=(('CSV', '*.csv'),), target='_FOPDicTxt_')],
        [sg.Radio('Create optimal codon table (need optimal codon file with sample name and sample annotation file',
                  'FOPdicRadio'),
         sg.Frame(layout=[
             [sg.Text('Optimal Codon Table:'),
              sg.In('None selected', key='_FOPmake1_'),
              sg.FileBrowse(file_types=(('CSV', '*.csv'),), target='_FOPmake1_')],
             [sg.Text('Sample Attribute Table:'),
              sg.In('None selected', key='_FOPmake2_'),
              sg.FileBrowse(file_types=(('CSV', '*.csv'),), target='_FOPmake2_')]
         ], title='FOP Reference Creation Settings')]
    ], title='Optimal Codon Settings', relief='raised')],
    [sg.Frame(layout=[
        [sg.Radio('Group by type and use modal result as optimal codon value', 'FOPcalcRadio')],
        [sg.Radio('Use optimal values of 1 sample from each type', 'FOPcalcRadio')],
        [sg.Radio('Calculate FOP for each sample (WARNING: MAY DRAMATICALLY INCREASE ANALYSIS TIME)', 'FOPcalcRadio')]
    ], title='FOP Calculation Settings', relief='raised')]
]
Output_Layout = [
    [sg.Text('Output Directory'),
     sg.InputText(default_text=os.path.dirname(os.path.realpath(__file__)), key='_SavePath_', disabled=True),
     sg.FolderBrowse(button_text='Save Directory', target='_SavePath_',
                     tooltip='Choose where the output will be saved. Defaults to script folder.')],
    [sg.Checkbox('Export masterfile (will be saved at output directory) as...'),
     sg.InputText(default_text='masterfile.csv')],
    [sg.Checkbox('Export FOP reference file (if it exists) as...'),
     sg.InputText(default_text='fop_ref.csv')],
    [sg.Checkbox('Generate & save all possible figures.')]]

Misc_Layout = [
    [sg.Text('CodonW Directory'),
     sg.InputText(os.path.dirname(os.path.realpath(__file__)), key='_CodonW_'),
     sg.FileBrowse(target='_CodonW_')],
    [sg.Checkbox('Append gene info to gene names'),
     sg.Text('Path/Directory:'),
     sg.InputText('None selected', key='_GeneInfo_'),
     sg.FileBrowse(target='_GeneInfo_')],
    [sg.Text('Figure regex filter'), sg.InputText('Possible|note|RL5A_+|RL6_+')]
]

print('Setting up General Tab Window_Layout...')
GenTab_Layout = [
    [sg.TabGroup(layout=[[
        sg.Tab('Input Settings', layout=Input_Layout),
        sg.Tab('RSCU Settings', layout=RSCU_Layout),
        sg.Tab('ENC Settings', layout=ENC_Layout),
        sg.Tab('FOP Settings', layout=FOP_Layout),
        sg.Tab('Output Settings', layout=Output_Layout),
        sg.Tab('Misc Settings', layout=Misc_Layout)]])],
    [sg.Multiline('Awaiting user input...', size=(50, 5), disabled=True, autoscroll=True)],
    [sg.Submit(button_text='RUN', key='_RUN_', size=(30, 2)), sg.Button('Reset to Default', key='_reset_')]
]
print('Setting up Table Tab Window_Layout...')

Settings_Layout = []


print('Setting up Figure Window_Layout...')
graph_combo = [
    'Gene_RSCU_Clustermap', 'Strain_RSCU_Clustermap',
    'ENC_Heatmap',
    'Gene_RSCU_Clustermap_Di', 'Gene_RSCU_Clustermap_Tri', 'Gene_RSCU_Clustermap_Tetra', 'Gene_RSCU_Clustermap_Hexa',
    'Strain_RSCU_Clustermap_Di', 'Strain_RSCU_Clustermap_Tri', 'Strain_RSCU_Clustermap_Tetra', 'Strain_RSCU_Clustermap_Hexa',
    'FOP_Gene_Clustermap', 'FOP_Strain_Clustermap',
    'FOP_SamplesGenes_Clustermap', 'FOP_SamplesStrains_Clustermap',
    'FOP_GC3_Genes', 'FOP_GC3_Strains', 'FOP_GC3_ALL',
    'FOP_Ref_Clustermap'
]

Figure_Layout = [
    [sg.Text('Select Figure: '), sg.Combo(graph_combo), sg.Submit('Generate')],
    [sg.Image()],
    [sg.Text('No figure fenerated'), sg.Text('Figure saved as: ')]
]

print('Setting up General Layout...')
Window_Layout = [[sg.TabGroup([[
    sg.Tab('General', GenTab_Layout), sg.Tab('Figures', Figure_Layout)
]])]]

print('Setting up Window...')
window = sg.Window('Codon Usage Analysis & Visualisation', Window_Layout, default_element_size=(12, 1))

print('Beggining event handling...')
while True:
    event, values = window.Read()
    print(event, values)
    if event is None or event == 'Exit':
        break
    if event == 'Show':
        pass

window.Close()
