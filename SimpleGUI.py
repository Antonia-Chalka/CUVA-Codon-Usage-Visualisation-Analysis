"""
Creates GUI for Codon Coverage and Visualisation Analysis
Created on 6 Jun 2019
@author: 2138645C
"""
import PySimpleGUI as sg
import os

print('Setting up Input Section Layout')

Input_Layout = [
    [sg.Radio('Directory', "FileRadio", enable_events=True, key='_DirRadio_'),
     sg.In(key='_DirPath_', disabled=True),
     sg.FolderBrowse(button_text='Choose File Directory', target='_DirPath_', disabled=True,
                     tooltip='Choose a directory with fasta files that are to be analysed.')
     ],
    [sg.Radio('Load Fasta Files', "FileRadio", enable_events=True, key='_FastaRadio_'),
     sg.In(key='_FastaDir_', disabled=True),
     sg.FilesBrowse(button_text='Choose fasta files', file_types=(('FASTA', '*.fasta'),), target='_FastaDir_',
                    disabled=True, tooltip='Choose 1 or more fasta files that are to be analysed')],
    [sg.Radio('Load pre-made CSV File', "FileRadio", enable_events=True, key='_CSVRadio_'),
     sg.In(key='_CSVDir_', disabled=True),
     sg.FileBrowse(button_text='Load CSV file', file_types=(('CSV', '*.csv'),), target='_CSVDir_',
                   disabled=True, tooltip='Choose 1 csv file already generated by this program.')],
    [sg.Text('No Files chosen for analysis.', key='_FileText_')],
    [sg.Text('If importing a csv file, make sure to check/uncheck FOP calculation depending on your needs.')]
    ]
RSCU_Layout = [
    [sg.Checkbox('Calculate RSCU', default=True, disabled=True, key='_RSCUCheck_')],
    [sg.Checkbox('Enable RSCU Quality Control', default=True, key='_RSCUQC_')],
    [sg.Frame(layout=[
        [sg.Checkbox('Discard RSCU if degeneracy of amino acid is larger than amino acid count in a gene.',
                     default=True, disabled=True, key='_RSCUQCGene_')],
        [sg.Checkbox('Discard RSCU if the count of non-empty (NaN) values of a codon is less than...',
                     default=True, disabled=True),
         sg.In('15', key='_RSCUQCThr_')]],
        title='Analysis Settings', relief='raised')]
    ]
ENC_Layout = [
    [sg.Checkbox('Calculate ENC', default=True, disabled=True, key='_ENCCheck_')],
    [sg.Checkbox('Calculate GC3', default=True, disabled=True, key='_GC3Check_')]
    ]
FOP_Layout = [
    [sg.Checkbox('Calculate FOP', default=True, key='_FOPCheck_'),
     sg.Text('WARNING: Enabling FOP will significantly increase analysis time', background_color='red')],
    [sg.Frame(layout=[
        [sg.Text('Optimal Codon Table (including type) Path:'),
         sg.In('None selected', key='_FOPDicPath_'),
         sg.FileBrowse(button_text='Choose file', file_types=(('CSV', '*.csv'),), target='_FOPDicPath_')],
        [sg.Text('Column Name which contains Tissue type: '), sg.In('SMTS', key='_FOPTissueColumn_')],
        [sg.Text('Column name which contains Sample name: '), sg.In('Tissue', key='_FOPSampleColumn_')]
    ], title='Optimal Codon Settings', relief='raised')],
    [sg.Frame(layout=[
        [sg.Radio('Group by type and use modal result as optimal codon value', 'FOPcalcRadio', key='_FOPModal_')],
        [sg.Radio('Use optimal values of 1 sample from each type', 'FOPcalcRadio', key='_FOPRnadom_')],
        [sg.Radio('Calculate FOP for each sample', 'FOPcalcRadio',
                  key='_FOPAll_')],
        [sg.Text('WARNING: CHOOSING TO CALCULATE FOP FOR EACH SAMPLE MAY DRAMATICALLY INCREASE ANALYSIS TIME',
                 background_color='red')],
        [sg.Text('Which tissues to calculate FOP for (default all). Separate tissues by comma. '),
         sg.In('all', key='_FOPTissues_')]
    ], title='FOP Calculation Settings', relief='raised')]
]
Output_Layout = [
    [sg.Text('Output Directory'),
     sg.InputText(default_text=os.path.dirname(os.path.realpath(__file__)) + '//Output//', key='_SavePath_'),
     sg.FolderBrowse(button_text='Save Directory', target='_SavePath_',
                     tooltip='Choose where the output will be saved. Defaults to script folder.')],
    [sg.Checkbox('Export masterfile (will be saved at output directory) as...'),
     sg.InputText(default_text='masterfile.csv', key='_masterdfName_')],
    [sg.Checkbox('If calculating FOP, export extra masterfile without FOP values.', key='_Extramasterdf_'),
     sg.InputText(default_text='nofop_masterfile.csv', key='_ExtramasterdfName_')],
    [sg.Checkbox('Generate & save all possible figures.', key='_GenFigures_')]]
GenFigures_Layout = [
    [sg.Text('Figure regex filter'), sg.InputText('Possible|note|RL5A_+|RL6_+', key='_FigRegex_')],
    [sg.Checkbox('Annotate Genes in heatmaps based on file:', key='_GeneAnnot_'),
     sg.In('None selected', key='_GeneAnnotFile_'),
     sg.FileBrowse(button_text='Choose file', file_types=(('CSV', '*.csv'),), target='_GeneAnnotFile_')],
    [sg.Checkbox('Annotate Genomes in heatmaps based on file:', key='_GenomeAnnot_'),
     sg.In('None selected', key='_GenomeAnnotFile_'),
     sg.FileBrowse(button_text='Choose file', file_types=(('CSV', '*.csv'),), target='_GenomeAnnotFile_')],
]
CodonW_Layout = [
    [sg.Text('CodonW Location'),
     sg.InputText(os.path.dirname(os.path.realpath(__file__)+"\\ref_files\\codonW"), key='_CodonWFile_'),
     sg.FileBrowse(file_types=(('exe', '*.exe'),), target='_CodonWDir_')],
    [sg.Text('CodonW Output Directory'),
     sg.InputText(os.path.dirname(os.path.realpath(__file__))+"\\codonw_out\\", key='_CodonWOutDir_'),
     sg.FolderBrowse(target='_CodonWOutDir_')]
]

print('Setting up General Tab Window_Layout...')
GenTab_Layout = [
    [sg.TabGroup(layout=[[
        sg.Tab('Input Settings', layout=Input_Layout),
        sg.Tab('RSCU Settings', layout=RSCU_Layout),
        sg.Tab('ENC Settings', layout=ENC_Layout),
        sg.Tab('FOP Settings', layout=FOP_Layout),
        sg.Tab('Output Settings', layout=Output_Layout),
        sg.Tab('Figure Settings', layout=GenFigures_Layout),
        sg.Tab('CodonW Settings', layout=CodonW_Layout)]])],
    [sg.Multiline('Awaiting user input...', size=(50, 5), disabled=True, autoscroll=True)],
    [sg.Submit(button_text='RUN', key='_RUN_', size=(30, 2)), sg.Button('Reset to Default', key='_reset_')]
]

print('Setting up Figure Window_Layout...')
graph_combo = [
    'Gene_RSCU_Clustermap', 'Strain_RSCU_Clustermap',
    'ENC_Heatmap',
    'Gene_RSCU_Clustermap_Di', 'Gene_RSCU_Clustermap_Tri', 'Gene_RSCU_Clustermap_Tetra', 'Gene_RSCU_Clustermap_Hexa',
    'Strain_RSCU_Clustermap_Di', 'Strain_RSCU_Clustermap_Tri', 'Strain_RSCU_Clustermap_Tetra', 'Strain_RSCU_Clustermap_Hexa',
    'FOP_Gene_Clustermap', 'FOP_Strain_Clustermap',
    'FOP_SamplesGenes_Clustermap', 'FOP_SamplesStrains_Clustermap',
    'FOP_GC3_Genes', 'FOP_GC3_Strains', 'FOP_GC3_ALL',
    'FOP_Ref_Clustermap'
]
Figure_Layout = [
    [sg.Text('Please look at the General Tab to alter regex filter, annotation file, and output directory.')],
    [sg.Text('Select Figure: '), sg.Combo(graph_combo, key='_FigureType_'), sg.Submit('Generate')],
    [sg.Image(key='_Figure_')],
    [sg.Text('Figure saved as: '), sg.Text('No figure generated', key='_FigureName_')]
]

print('Setting up General Layout...')
Window_Layout = [[sg.TabGroup([[
    sg.Tab('General', GenTab_Layout), sg.Tab('Figures', Figure_Layout)
]])]]

print('Setting up Window...')
window = sg.Window('Codon Usage Analysis & Visualisation', Window_Layout, default_element_size=(12, 1))

print('Beginning event handling...')
while True:
    event, values = window.Read()
    print(event, values)
    if event is None or event == 'Exit':
        break
    if event == 'Show':
        pass
    if event == '_RUN_':
        print('Pressed Run button')
        print(values)
        file_path = None
        files = []
        if values('_DirRadio_') is True:
            for file in os.listdir(file_path):
                if file.endswith(".fasta"):
                    files.append(file)
                    window.eleme

window.Close()
