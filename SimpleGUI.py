"""
Creates GUI for CUVA (Codon Usage Visualisation & Analysis)
Created on 6 Jun 2019
@author: Antonia Chalka
"""
import PySimpleGUI as sg
import os
from CodonUsage import model
from CodonUsage import FigureGen

Input_Layout = [
    [sg.Text('Import coding sequences:', font=('Any', 15, 'underline bold'))],
    [sg.Radio('Directory', "FileRadio", enable_events=True, key='_DirRadio_'),
     sg.In(key='_DirPath_'),
     sg.FolderBrowse(button_text='Choose File Directory', target='_DirPath_',
                     tooltip='Choose a directory with fasta files that are to be analysed.')],
    [sg.Radio('Load Fasta Files', "FileRadio", enable_events=True, key='_FastaRadio_'),
     sg.In(key='_FastaPath_'),
     sg.FilesBrowse(button_text='Choose fasta files', file_types=(('FASTA', '*.fasta'),), target='_FastaPath_',
                    tooltip='Choose 1 or more fasta files that are to be analysed')],
    [sg.Text('If importing fasta files, make sure the name of the file is the genome/strain identifier.')],
    [sg.Text('Alternatively, import csv file previously generated by CUVA:', font=('Any', 15, 'underline bold'))],
    [sg.Radio('Load pre-made CSV File', "FileRadio", enable_events=True, key='_CSVRadio_'),
     sg.In(key='_CSVPath_'),
     sg.FileBrowse(button_text='Load CSV file', file_types=(('CSV', '*.csv'),), target='_CSVPath_',
                   tooltip='Choose 1 csv file already generated by this program.')],
    [sg.Text('If importing a csv file, make sure to check/uncheck FOP calculation depending on your needs.')]
]
RSCU_Layout = [
    [sg.Checkbox('Calculate RSCU', default=True, disabled=True, key='_RSCUCheck_')],
    [sg.Checkbox('Enable RSCU Quality Control', default=True, key='_RSCUQC_')],
    [sg.Frame(layout=[
        [sg.Checkbox('Discard RSCU if degeneracy of amino acid is larger than amino acid count in a gene.',
                     default=True, disabled=True, key='_RSCUQCGene_')],
        [sg.Checkbox('Discard RSCU if the count of non-empty (NaN) values of a codon is less than...',
                     default=True, disabled=True),
         sg.In('15', key='_RSCUQCThr_')]],
        title='Analysis Settings', relief='raised')]
]
ENC_Layout = [
    [sg.Checkbox('Calculate ENC', default=True, disabled=True, key='_ENCCheck_')],
    [sg.Checkbox('Calculate GC3', default=True, disabled=True, key='_GC3Check_')]
]
FOP_Layout = [
    [sg.Checkbox('Calculate FOP', default=False, key='_FOPCheck_'),
     sg.Text('WARNING: Enabling FOP will significantly increase analysis time', background_color='red')],
    [sg.Frame(layout=[
        [sg.Text('Optimal Codon Table (including type) Path:'),
         sg.In('None selected', key='_FOPRefPath_'),
         sg.FileBrowse(button_text='Choose file', file_types=(('CSV', '*.csv'),), target='_FOPRefPath_')],
        [sg.Text('Column Name which contains Tissue type: '), sg.In('SMTS', key='_FOPTissueColumn_')],
        [sg.Text('Column name which contains Sample name: '), sg.In('Tissue', key='_FOPSampleColumn_')]
    ], title='Optimal Codon Settings', relief='raised')],
    [sg.Frame(layout=[
        [sg.Radio('Group by type and use modal result as optimal codon value', 'FOPcalcRadio', key='_FOPModal_')],
        [sg.Radio('Use optimal values of 1 sample from each type', 'FOPcalcRadio', key='_FOPRandom_')],
        [sg.Radio('Calculate FOP for each sample', 'FOPcalcRadio',
                  key='_FOPAll_')],
        [sg.Text('WARNING: CHOOSING TO CALCULATE FOP FOR EACH SAMPLE MAY DRAMATICALLY INCREASE ANALYSIS TIME',
                 background_color='red')],
        [sg.Text('Which tissues to calculate FOP for (default all). Separate tissues by comma. '),
         sg.In('all', key='_FOPTissues_')]
    ], title='FOP Calculation Settings', relief='raised')]
]
Output_Layout = [
    [sg.Text('Output Directory'),
     sg.InputText(default_text=os.path.dirname(os.path.realpath(__file__)) + '//Output//', key='_OutPath_'),
     sg.FolderBrowse(button_text='Save Directory', target='_OutPath_',
                     tooltip='Choose where the output will be saved. Defaults to script folder.')],
    [sg.Text('Export masterfile (will be saved at output directory) as...'),
     sg.InputText(default_text='masterfile.csv', key='_masterdfName_')],
    [sg.Checkbox('If calculating FOP, export extra masterfile without FOP values.', default=True,
                 key='_Extramasterdf_'),
     sg.InputText(default_text='nofop_masterfile.csv', key='_ExtramasterdfName_')],
    [sg.Checkbox('Generate & save all possible figures.', default=True,
                 key='_GenFigures_')]
]
GenFigures_Layout = [
    [sg.Text('Figure regex filter'), sg.InputText('Possible|note|RL5A_+|RL6_+', key='_FigRegex_')],
    [sg.Checkbox('Annotate Genes in heatmaps based on file:', key='_GeneAnnot_'),
     sg.In('None selected', key='_GeneAnnotFile_'),
     sg.FileBrowse(button_text='Choose file', file_types=(('CSV', '*.csv'),), target='_GeneAnnotFile_')],
    [sg.Checkbox('Annotate Genomes in heatmaps based on file:', key='_GenomeAnnot_'),
     sg.In('None selected', key='_GenomeAnnotFile_'),
     sg.FileBrowse(button_text='Choose file', file_types=(('CSV', '*.csv'),), target='_GenomeAnnotFile_')],
]
CodonW_Layout = [
    [sg.Text('CodonW Location'),
     sg.InputText(os.path.dirname(os.path.realpath(__file__))+"\\ref_files\\codonW", key='_CodonWFile_'),
     sg.FileBrowse(file_types=(('exe', '*.exe'),), target='_CodonWDir_')],
    [sg.Text('CodonW Output Directory'),
     sg.InputText(os.path.dirname(os.path.realpath(__file__))+"\\codonw_out\\", key='_CodonWOutDir_'),
     sg.FolderBrowse(target='_CodonWOutDir_')]
]

Window_Layout = [
    [sg.TabGroup(layout=[[
        sg.Tab('Input Settings', layout=Input_Layout),
        sg.Tab('RSCU Settings', layout=RSCU_Layout),
        sg.Tab('ENC Settings', layout=ENC_Layout),
        sg.Tab('FOP Settings', layout=FOP_Layout),
        sg.Tab('Figure Settings', layout=GenFigures_Layout),
        sg.Tab('Output Settings', layout=Output_Layout),
        sg.Tab('CodonW Settings', layout=CodonW_Layout)]])],
    [sg.Multiline('Awaiting user input...\n', size=(50, 5), disabled=True, autoscroll=True, key='_Console_')],
    [sg.Submit(button_text='RUN', key='_RUN_', size=(30, 2)), sg.Button('Reset to Default', key='_Reset_')]
]
window = sg.Window('CUVA (Codon Usage Visualisation & Analysis', Window_Layout, default_element_size=(12, 1))

figure_types = [
    'Gene_RSCU_Clustermap', 'Strain_RSCU_Clustermap',
    'ENC_Heatmap',
    'Gene_RSCU_Clustermap_Di', 'Gene_RSCU_Clustermap_Tri', 'Gene_RSCU_Clustermap_Tetra', 'Gene_RSCU_Clustermap_Hexa',
    'Strain_RSCU_Clustermap_Di', 'Strain_RSCU_Clustermap_Tri', 'Strain_RSCU_Clustermap_Tetra',
    'Strain_RSCU_Clustermap_Hexa',
    'FOP_Gene_Clustermap', 'FOP_Strain_Clustermap',
    'FOP_SamplesGenes_Clustermap', 'FOP_SamplesStrains_Clustermap',
    'ENC_GC3_Genes', 'ENC_GC3_Strains', 'ENC_GC3_ALL',
    'FOP_Ref_Clustermap'
]
# print('Beginning event handling...')
while True:
    event, values = window.Read()
    print(event, values)
    if (event is None) or (event == 'Exit'):
        break
    if event == '_Reset_':
        # Clear Input
        window.Element('_DirPath_').Update('')
        window.Element('_FastaPath_').Update('')
        window.Element('_CSVPath_').Update('')

        # Reset RSCU
        window.Element('_RSCUQC_').Update(True)
        window.Element('_RSCUQCThr_').Update('15')

        # Reset FOP
        window.Element('_FOPCheck_').Update(False)
        window.Element('_FOPRefPath_').Update('None selected')
        window.Element('_FOPTissueColumn_').Update('SMTS')
        window.Element('_FOPSampleColumn_').Update('Tissue')
        window.Element('_FOPTissues_').Update('all')

        # Reset Output
        window.Element('_OutPath_').Update(os.path.dirname(os.path.realpath(__file__)) + '//Output//')
        window.Element('_GenFigures_').Update(True)
        window.Element('_masterdfName_').Update('masterfile.csv')
        window.Element('_Extramasterdf_').Update(True)
        window.Element('_ExtramasterdfName_').Update('nofop_masterfile.csv')

        # Reset Figure Settings
        window.Element('_FigRegex_').Update('Possible|note|RL5A_+|RL6_+')
        window.Element('_GeneAnnot_').Update(False)
        window.Element('_GenomeAnnot_').Update(False)

        # Reset CodonW
        window.Element('_CodonWFile_').Update(os.path.dirname(os.path.realpath(__file__))+"\\ref_files\\codonW")
        window.Element('_CodonWOutDir_').Update(os.path.dirname(os.path.realpath(__file__))+"\\codonw_out\\")

    if event == '_RUN_':
        # Obtaining Input files
        files = []
        if values['_DirRadio_'] is True:  # Directory Input
            for file in os.listdir(values['_DirPath_']):
                if file.endswith(".fasta"):
                    files.append(os.path.abspath(os.path.join(values['_DirPath_'], file)))
        elif values['_FastaRadio_'] is True:  # Fasta File(s) Input
            files = values['_FastaPath_'].split(';')
        elif values['_CSVRadio_'] is True:  # CSV Input
            files = values['_CSVPath_']
        # Create model class with CodonW dir and output
        main_model = model.CodonData(codonw_dir=values['_CodonWFile_'], codonw_out_dir=values['_CodonWOutDir_'])

        # Calculate RSCU, ENC, GC3 if Input is *not* csv
        if (values['_DirRadio_'] is True) or (values['_FastaRadio_'] is True):
            for file in files:
                out = main_model.iterate_populate_master_file(os.path.dirname(file) + "\\", os.path.basename(file))
        elif values['_CSVRadio_'] is True:
            main_model.import_csv(values['_CSVDir_'])

        # Perform quality controls for RSCU  (optional)
        if values['_RSCUCheck_'] is True:
             main_model.qc_rscu(int(values['_RSCUQCThr_']))

        # Export non-fop masterfile (optional)
        if values['_Extramasterdf_'] is True:
            main_model.export_csv(values['_ExtramasterdfName_'], values['_OutPath_'] + "\\")

        # Calculate FOP  (optional)
        if values['_FOPCheck_'] is True:
            main_model.set_fop_ref(values['_FOPRefPath_'])

            fop_type = None
            if values['_FOPModal_'] is True:
                fop_type = 'mode'
            elif values['_FOPRandom_'] is True:
                fop_type = 'random'
            elif values['_FOPAll_'] is True:
                fop_type = 'all'
            main_model.set_fop_dict(fop_type, type_column_name=values['_FOPTissueColumn_'],
                                    tissue_column_name=values['_FOPSampleColumn_'])

            if values['_FOPTissues_'] != 'all':
                tissues = values['_FOPTissues_'].split(",")
            else:
                tissues = 'all'
            main_model.calculate_fop(tissues=tissues)

        # Export file
        main_model.export_csv(values['_masterdfName_'], values['_OutPath_'] + "\\")

        # Export Figures
        if values['_GenFigures_'] is True:
            if values['_GeneAnnot_'] is True:
                gene_annot = values['_GeneAnnotFile_']
            else:
                gene_annot = None
            if values['_GenomeAnnot_'] is True:
                genome_annot = values['_GenomeAnnotFile_']
            else:
                genome_annot = None
            figures = FigureGen(data=main_model.masterdf, regex=values['_FigRegex_'],
                                gene_annotation_path=gene_annot, strain_annotation_path=genome_annot)
            if values['_FOPCheck_'] is False:
                figure_types = [figure for figure in figure_types if figure not in {'FOP_Gene_Clustermap',
                                                                                  'FOP_Strain_Clustermap',
                                                                                  'FOP_SamplesGenes_Clustermap',
                                                                                  'FOP_SamplesStrains_Clustermap',
                                                                                  'FOP_Ref_Clustermap'}]
            for figure in figure_types:
                if figure == 'FOP_Ref_Clustermap':
                    fop_ref = main_model.fop_ref_df
                    fop_ref.set_index(values['_FOPSampleColumn_'])

                    fop_ref_figgen = FigureGen(fop_ref)
                    fop_ref_figgen.make_graph(figure, out_path=values['_OutPath_'] + "\\")
                else:
                    figures.make_graph(figure, out_path=values['_OutPath_'] + "\\")
window.Close()
